Das Ziel des Programmes war es die Spaltreihen von Uran mithilfe eines Poisson-Prozesses zu simulieren.
Dafür standen zwei Dateien mit Attributen von Kernen, wie auch Wahrscheinlichkeiten für die Spaltungen zur Verfügung.

Die Grundlogik habe ich in der main() Funktion verbaut. Als erstes werden die Daten aus dem File 'Nuklide.txt' und
danach aus 'U235nf_fp.txt' ausgelesen und in eine std::map geschrieben. Die Hashmap habe ich ausgewählt, da sie meiner Meinung
nach die passendste Datenstruktur für einen Datensatz an Attributen ist. Der Vorteil ist, dass ich mithilfe meiner Struktur
AtomicNumbers (eine Bezeichnung für std::pair<int, int>) die Attribute der Atome sehr leicht aus der Map auslesen kann.
Die zweite Map mit den Wahrscheinlichkeiten entstand aus dem selben Grund, wobei das std::string für das Symbol des Kerns steht.

Für Eigenschaften der Atome habe ich eine eigene Struktur mit dem Namen AtomicProperties erstellt.
Die Eigenschaften sind das Symbol des Atomes, die optionale Halbwärtszeit (es gibt stabile Atome), wie auch die Art des
Zustandes (stabil, instabil - mit der Spaltungsmethode). Der Zustand wird auch in einer Map gespeichert, da der
[] operator einen neuen Eintrag instanziert, falls keiner bei einem eingegebenen key existiert, was recht praktisch ist.

Um das Arbeiten mit den Attributen zu erleichtern habe ich eine Enumeration für den Zustand erstellt. Außerdem auch einige
Hilfsfunktionen, wie
    - convertToSeconds: wandelt den Zeiteintrag mit dem Format s, h, m, d, a standardmäßig in s um.
    - getDecayType: wandelt enum Decay in ein string um für das printen in std::cout
    - atomToString: wandelt den Namen des Kerns wie in Nuklide.txt um (z.B. von AtomicNumbers(34, 86) in 34-Se-86)
    - loadAtomAttributes: parsen der Datei 'Nuklide.txt'
    - loadUraniumDecayAtoms: parsen der Datei 'U235nf_fp.txt'
All diese Hilfsfunktionen befinden sich aufgeteilt in den Files 'atomAttributeHelpers.hpp' und 'atomAttributeHelpers.cpp'.

Alle Funktionen, die sich in 'decay.hpp' und 'decay.cpp' befinden beschäftigen sich mit dem Ermitteln der Spaltreihen.
'betaDecay', 'betaNeutronDecay' und 'electronCapture' verändern die AtomicNumbers, sodass der korrekte Spaltvorgang abläuft.
'isStable' gibt zurück, ob es sich um einen stabilen Kern handelt oder nicht. 'atomCorrectDecay' ist eine Hilfsfunktion, die
die Entscheidung trifft welcher Vorgang ablaufen soll. In 'decayAtom' ist die Logik verbaut die den Suchprozess der
Spaltreihe steuert. Jedes Mal wird eine diskrete Verteilung erstellt, wo dann mit den angegebenen Wahrscheinlichkeiten
gewürfelt wird welcher Vorgang ablaufen soll. Normalerweise steht dort nur bm, also ist die WS=1. Wenn aber eine Neutronenemmission,
oder ein Elektroneneinfang auftritt, dann wird gewürfelt. Der Rückgabetyp ist der Tochterkern.

Um die Spaltreihe zu berechnen muss jetzt nur der ganze Prozess so lange ablaufen, bis ein Kern stabil ist. Dies geschieht in der Funktion
'printDecayChain' in main.cpp. In der while Schleife wird der Kern so lange gespalten, bis ein stabiler Kern erreicht wird.

Für den Poisson Prozess gibt es einige Hilfsfunktionen. 'poissonProcess' führt so lange bernoulli Versuche durch, bis true zurückgegeben wird,
oder das Limit an Versuchen erreicht wird (hardgecoded auf 10000). Der Rückgabewert ist in dem Fall die Anzahl an durchlaufenen Intervallen dt.
Somit kann der Zeitpunkt der Spaltung berechnet werden: dt*retTimeIntervals. 'calcLambda' berechnet den Lambda wert laut in der Angabe angegebenen
Formel. Hier ist aber das Format auf Sekunden festgelegt, deswegen müsste entweder das Limit an Intervallen vergrößert werden um z.B. das
Format 'a' zu unterstützen, oder Lambda in a berechnet werden. Das könnte ich auch noch automatisieren, aber es war meiner Meinung
nach nicht mehr den Aufwand wert.

Letztendlich führt 'poissonOfAtom' die Simulation des Poisson-Prozesses durch. Für jeden Kern und Tochterkern wird ein eigenes Histogramm
erstellt, das dann im nächsten Schritt in eine Datei ausgegeben wird (der Dateiname ist der Name des Kerns, z.B. 34-Se-86.dat)
und zu guter letzt mit gnuplot geplottet wird. Beides findet in einer Schleife statt, da jeder Kern aus der Spaltreihe einzeln geplottet wird.